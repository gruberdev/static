default:
  image: alpine:latest

  cache:
    key: example-production
    paths:
      - .terraform

variables:
  TFMASK_VERSION: "0.7.0"
  TERRAFORM_VERSION: "0.15.2"
  TERRAFORM_ARCH: "amd64"
  TERRAFORM_OS: "linux"
  TFMASK_URL: "https://github.com/cloudposse/tfmask/releases/download/${TFMASK_VERSION}/tfmask_${TERRAFORM_OS}_${TERRAFORM_ARCH}"
#  TF_ROOT: ${CI_PROJECT_DIR}
#  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/example-production

before_script:
  - apk -q update -q && apk add -q bash curl unzip zip jq brotli openssh openssl wget
  - bash
  - wget -q https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip
  - unzip -q terraform_${TERRAFORM_VERSION}_linux_amd64.zip -d /bin
  - rm -f terraform_${TERRAFORM_VERSION}_linux_amd64.zip
  - terraform init

stages:
  - test
  - build
  - deploy
  - post_deploy

validate:
  stage: test
  script:
    - echo ${vultr_ssh_key} > sshkey.pub
    - terraform validate
    - rm sshkey.pub || true

plan:
  stage: build
  script:
    - export	TF_VAR_cloudflare_api_key=${TF_VAR_cloudflare_api_key}
    - export	TF_VAR_cloudflare_email=$TF_VAR_cloudflare_email
    - export	TF_VAR_domain_type=$TF_VAR_domain_type
    - export	TF_VAR_hostname=$TF_VAR_hostname
    - export	TF_VAR_label=$TF_VAR_label
    - export	TF_VAR_os=244
    - export	TF_VAR_plan=$TF_VAR_plan
    - export	TF_VAR_region=$TF_VAR_region
    - export	TF_VAR_ttl=$TF_VAR_ttl
    - export	TF_VAR_vultr_token=$TF_VAR_vultr_token
    - export  VULTR_API_KEY=$TF_VAR_vultr_token
    - export  TF_VULTR_API_KEY=$TF_VAR_vultr_token
    - export	TF_VAR_zone_id=$TF_VAR_zone_id
    - export	TF_VAR_TFMASK_CHAR=$TF_VAR_TFMASK_CHAR
    - export	TF_VAR_TFMASK_VALUES_REGEX=$TF_VAR_TFMASK_VALUES_REGEX
    - echo ${vultr_ssh_key} > sshkey.pub
    - wget -q ${TFMASK_URL} && chmod +x tfmask_${TERRAFORM_OS}_${TERRAFORM_ARCH} && mv tfmask_${TERRAFORM_OS}_${TERRAFORM_ARCH} /usr/local/bin/tfmask
    - terraform plan -no-color | tfmask
    - rm sshkey.pub || true

apply:
  stage: deploy
  environment:
    name: production
  script:
    - terraform apply -no-color | tfmask
  when: manual
  only:
    - master

docs:
  stage: post_deploy
  variables:
    GITHUB_EVENT: ${GITHUB_EVENT} #generate-documentation
    GITHUB_PATH: ${GITHUB_PATH} #gruberdev/static
    #GITHUB_TOKEN is a protected Variable set at Gitlab's CI/CD configuration
  script:
    - |
      curl -H "Accept: application/vnd.github.everest-preview+json" \
      -H "Authorization: token ${GITHUB_TOKEN}" \
      --request POST \
      --data '{"event_type": "${GITHUB_EVENT}"}' \
      https://api.github.com/repos/${GITHUB_PATH}/dispatches
