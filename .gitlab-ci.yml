default:
  image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest

  cache:
    key: example-production
    paths:
      - .terraform

variables:
  TFMASK_VERSION: "0.7.0"
  TFMASK_ARCH: "amd64"
  TFMASK_OS: "linux"
  TFMASK_URL: "https://github.com/cloudposse/tfmask/releases/download/${TFMASK_VERSION}/tfmask_${TFMASK_OS}_${TFMASK_ARCH}"
#  TF_ROOT: ${CI_PROJECT_DIR}/environments/example/production
#  TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/example-production

#before_script:
#  - cd ${TF_ROOT}

stages:
  - init
  - test
  - build
  - deploy
  - post_deploy

modules:
  stage: init
  script:
    - gitlab-terraform init

validate:
  stage: test
  script:
    - gitlab-terraform validate

plan:
  stage: build
  script:
    - apk -q update && apk -q add wget
    - wget -q ${TFMASK_URL} && chmod +x tfmask_${TFMASK_OS}_${TFMASK_ARCH} && mv tfmask_${TFMASK_OS}_${TFMASK_ARCH} /usr/local/bin/tfmask
    - gitlab-terraform plan -no-color | tfmask

apply:
  stage: deploy
  environment:
    name: production
  script:
    - gitlab-terraform apply -no-color | tfmask
  when: manual
  only:
    - master

docs:
  stage: post_deploy
  variables:
    GITHUB_EVENT: ${GITHUB_EVENT} #generate-documentation
    GITHUB_PATH: ${GITHUB_PATH} #gruberdev/static
    #GITHUB_TOKEN is a protected Variable set at Gitlab's CI/CD configuration
  script:
    - |
      curl -H "Accept: application/vnd.github.everest-preview+json" \
      -H "Authorization: token ${GITHUB_TOKEN}" \
      --request POST \
      --data '{"event_type": "${GITHUB_EVENT}"}' \
      https://api.github.com/repos/${GITHUB_PATH}/dispatches
